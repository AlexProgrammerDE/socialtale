generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  organizations      OrganizationMember[]
  owningOrg          Organization[]
  theme              Theme                @default(DARK)
  emailNotifications Boolean              @default(true)
  googleFlows        GoogleFlow[]
  messages           Message[]

  @@map("users")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  seen      Boolean  @default(false)
  sender    String
  content   String
  target    User     @relation(fields: [targetId], references: [id])
  targetId  Int
}

model Post {
  id        Int          @id @default(autoincrement())
  title     String
  content   String?
  published Boolean      @default(false)
  platform  Platform
  orgId     Int
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User         @relation(fields: [authorId], references: [id])
}

model Organization {
  id                Int                   @id @default(autoincrement())
  name              String
  slug              String                @unique
  members           OrganizationMember[]
  owner             User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           Int
  posts             Post[]
  twitterAccounts   TwitterOrgAccount[]
  facebookAccounts  FacebookOrgAccount[]
  instagramAccounts InstagramOrgAccount[]
  tiktokAccounts    TikTokOrgAccount[]
  pinterestAccounts PinterestOrgAccount[]
  googleAccounts    GoogleOrgAccount[]
  twitterFlows      TwitterFlow[]
  googleFlows       GoogleFlow[]
  invites           OrganizationInvite[]
}

model OrganizationMember {
  id         Int                  @id @default(autoincrement())
  org        Organization         @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId      Int
  member     User                 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   Int
  role       Role
  orgInvited OrganizationInvite[]

  @@unique([orgId, memberId])
}

model OrganizationInvite {
  id        String             @id @default(cuid())
  email     String
  orgId     Int
  org       Organization       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  role      Role
  inviter   OrganizationMember @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId Int

  @@unique([email, orgId])
}

model TwitterOrgAccount {
  userId            String       @id
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             Int
  accessToken       String
  accessTokenSecret String
}

model TwitterFlow {
  id               Int          @id @default(autoincrement())
  org              Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId            Int
  oauthToken       String       @unique
  oauthTokenSecret String
}

model FacebookOrgAccount {
  id    Int          @id @default(autoincrement())
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model InstagramOrgAccount {
  id    Int          @id @default(autoincrement())
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model TikTokOrgAccount {
  id    Int          @id @default(autoincrement())
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model PinterestOrgAccount {
  id    Int          @id @default(autoincrement())
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model GoogleOrgAccount {
  userId       String       @id
  org          Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        Int
  refreshToken String
  accessToken  String       @db.VarChar(1000)
}

model GoogleFlow {
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId  Int
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int          @unique
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Platform {
  TWITTER
  FACEBOOK
  INSTAGRAM
  TIKTOK
  PINTEREST
  YOUTUBE
}

enum Theme {
  DARK
  SYNTHWAVE
  FOREST
  BLACK
  LUXURY
  HALLOWEEN
  BUSINESS
  DRACULA
  NIGHT
  RETRO
  COFFEE
  LIGHT
  LOFI
  CMYK
  CYBERPUNK
  VALENTINE
  CUPCAKE
  WINTER
  LEMONADE
  CORPORATE
}
